/* eslint-disable */

"use client";
import { useState, useEffect, useRef } from "react";
import Image from "next/image";
import {
  ProgressSlider,
  SliderBtnGroup,
  SliderBtn,
  SliderContent,
  SliderWrapper,
} from "@/components/ui/progress-slider";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Home } from "lucide-react";

const items = [
  {
    icon: <Home />,
    title: "üé® Con ng∆∞·ªùi l√† ch·ªß th·ªÉ s√°ng t·∫°o",
    desc: 'Con ng∆∞·ªùi kh√¥ng ch·ªâ l√† ƒë·ªëi t∆∞·ª£ng ti·∫øp thu, m√† l√† ch·ªß th·ªÉ t·∫°o ra gi√° tr·ªã. Vi·ªác "tr·ªìng ng∆∞·ªùi" l√† s·ª± ƒë·∫ßu t∆∞ v√†o tr√≠ tu·ªá, ph·∫©m ch·∫•t v√† nƒÉng l·ª±c ƒë·ªÉ gi√∫p h·ªç c√≥ th·ªÉ ƒë√≥ng g√≥p cho s·ª± ph√°t tri·ªÉn x√£ h·ªôi l√¢u d√†i.',
    sliderName: "Con ng∆∞·ªùi l√† ch·ªß th·ªÉ s√°ng t·∫°o",
    src: "/assets/image/conclusion1.jpg",
  },
  {
    icon: <Home />,
    title: "üöÄ Vai tr√≤ quy·∫øt ƒë·ªãnh c·ªßa con ng∆∞·ªùi ƒë·ªëi v·ªõi s·ª± ph√°t tri·ªÉn x√£ h·ªôi",
    desc: "Con ng∆∞·ªùi l√† ƒë·ªông l·ª±c ch√≠nh trong c√°c ti·∫øn b·ªô v·ªÅ khoa h·ªçc, c√¥ng ngh·ªá v√† vƒÉn h√≥a. M·ªôt x√£ h·ªôi th·ªãnh v∆∞·ª£ng kh√¥ng th·ªÉ thi·∫øu con ng∆∞·ªùi ƒë∆∞·ª£c ph√°t tri·ªÉn ƒë·∫ßy ƒë·ªß v·ªÅ nƒÉng l·ª±c v√† ƒë·∫°o ƒë·ª©c.",
    sliderName: "Vai tr√≤ quy·∫øt ƒë·ªãnh c·ªßa con ng∆∞·ªùi ƒë·ªëi v·ªõi s·ª± ph√°t tri·ªÉn x√£ h·ªôi",
    src: "/assets/image/conclusion2.jpg",
  },
  {
    icon: <Home />,
    title: "üå± Ph√°t tri·ªÉn con ng∆∞·ªùi trong th·ªùi ƒë·∫°i m·ªõi",
    desc: "ƒê·∫ßu t∆∞ gi√°o d·ª•c, khuy·∫øn kh√≠ch s√°ng t·∫°o, v√† x√¢y d·ª±ng m√¥i tr∆∞·ªùng l√†nh m·∫°nh l√† n·ªÅn t·∫£ng gi√∫p con ng∆∞·ªùi ph√°t tri·ªÉn to√†n di·ªán, th√∫c ƒë·∫©y x√£ h·ªôi b·ªÅn v·ªØng.",
    sliderName: "Ph√°t tri·ªÉn con ng∆∞·ªùi trong th·ªùi ƒë·∫°i m·ªõi",
    src: "/assets/image/conclusion3.jpg",
  },
  {
    icon: <Home />,
    title: "üåç Con ng∆∞·ªùi v√† s·ª± ph√°t tri·ªÉn b·ªÅn v·ªØng",
    sliderName: "Con ng∆∞·ªùi v√† s·ª± ph√°t tri·ªÉn b·ªÅn v·ªØng",
    desc: "Con ng∆∞·ªùi l√† y·∫øu t·ªë quy·∫øt ƒë·ªãnh trong vi·ªác b·∫£o v·ªá m√¥i tr∆∞·ªùng v√† th√∫c ƒë·∫©y c√¥ng b·∫±ng x√£ h·ªôi, g√≥p ph·∫ßn x√¢y d·ª±ng m·ªôt th·∫ø gi·ªõi c√¥ng b·∫±ng v√† b·ªÅn v·ªØng.",
    src: "/assets/image/conclusion5.jpg",
  },
  // {
  //   icon: <Home />,
  //   title: "üîë T·ªïng k·∫øt",
  //   sliderName: "T·ªïng k·∫øt",
  //   desc: 'T√≥m l·∫°i, "tr·ªìng ng∆∞·ªùi" kh√¥ng ch·ªâ mang l·∫°i l·ª£i √≠ch ngay l·∫≠p t·ª©c m√† c√≤n t·∫°o d·ª±ng n·ªÅn t·∫£ng cho s·ª± th·ªãnh v∆∞·ª£ng l√¢u d√†i, g√≥p ph·∫ßn x√¢y d·ª±ng m·ªôt x√£ h·ªôi v·ªØng m·∫°nh v√† b·ªÅn v·ªØng trong t∆∞∆°ng lai.',
  //   src: "/assets/image/conclusion4.jpg",
  // },
];

export default function ConclusionSection() {
  const isMobile = useMediaQuery("(min-width: 640px)");

  const [isVisible, setIsVisible] = useState(false);
  const [activeSlider, setActiveSlider] = useState(items[0].sliderName); // M·∫∑c ƒë·ªãnh l√† slider ƒë·∫ßu ti√™n
  const sectionRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          setIsVisible(true);
          setActiveSlider(items[0].sliderName); // Khi ph·∫ßn t·ª≠ xu·∫•t hi·ªán, k√≠ch ho·∫°t slider ƒë·∫ßu ti√™n
        } else {
          setIsVisible(false);
        }
      },
      { threshold: 0.5 } // Ch·∫°y khi ph·∫ßn t·ª≠ √≠t nh·∫•t 50% xu·∫•t hi·ªán
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
    };
  }, []);

  return (
    <div
      ref={sectionRef}
      className="w-full h-[95vh] bg-slate-950 overflow-hidden"
    >
      <ProgressSlider
        vertical={isMobile ? true : false}
        fastDuration={300}
        duration={4000}
        activeSlider={activeSlider} // Truy·ªÅn state activeSlider
        className="flex h-full"
      >
        <SliderBtnGroup className="relative w-3/6 z-10 flex flex-col h-full bg-slate-950 backdrop-blur-md overflow-hidden">
          {items.map((item, index) => (
            <SliderBtn
              key={index}
              value={item?.sliderName}
              className="text-left p-6 border-b flex-1"
              progressBarClass="left-0 top-0 bg-white w-3 h-full before:h-full before:w-4 before:bg-white"
              // Kh√¥ng c·∫ßn onClick n·ªØa v√¨ t·ª± ƒë·ªông k√≠ch ho·∫°t khi cu·ªôn ƒë·∫øn
            >
              <h2 className="relative px-4 py-2 rounded w-fit bg-white text-black mb-4 text-xl font-bold">
                {item.title}
              </h2>
              <p className="text-base font-medium text-slate-200 line-clamp-2">
                {item.desc}
              </p>
            </SliderBtn>
          ))}
        </SliderBtnGroup>

        <SliderContent className="w-3/6 flex flex-col h-full">
          {items.map((item, index) => (
            <SliderWrapper
              className="h-full w-full"
              key={index}
              value={item?.sliderName}
            >
              <Image
                className="h-full w-full object-cover"
                src={item?.src}
                width={1900}
                height={1080}
                alt={item.sliderName}
              />
            </SliderWrapper>
          ))}
        </SliderContent>
      </ProgressSlider>
    </div>
  );
}
